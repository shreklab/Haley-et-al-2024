% PLOTFORAGINGGFP.m
%
%   PLOTFORAGINGGFP loads a saved workspace from the ANALYZEGFP analysis
%   pipeline, performs statistical analysis, and generates plots and
%   source data related to the fluorescence profiles of bacterial lawns.
%   The script models the change in lawn border amplitude over time,
%   creates violin plots for various geometric and fluorescence metrics,
%   and exports publication-quality figures.
%
%   WORKFLOW:
%       1.  Load Data: Prompts the user to select a saved workspace .mat
%           file from an analyzeGFP run.
%       2.  Filter Data: Excludes specific images, plates, or outlier data
%           points based on predefined criteria (e.g., poor circularity,
%           unrealistic border-to-center ratios).
%       3.  Model Border Amplitude: Fits a linear model to the border
%           amplitude of lawns as a function of their growth time for each
%           experimental condition. It saves these model parameters to
%           'borderAmplitude.csv'.
%       4.  Generate Plots: Creates and saves a series of figures:
%           -   A plot showing the modeled change in border amplitude over
%               time for different conditions.
%           -   Violin plots summarizing key metrics (e.g., FWHM,
%               circularity, border amplitude) across conditions.
%           -   A series of example images that illustrate the image
%               analysis pipeline (e.g., raw vs. normalized fluorescence,
%               mask generation, lawn profiles).
%
%   REQUIRED DATA FILES:
%       - A 'workspace.mat' file generated by the analyzeGFP.m script,
%         containing the 'lawnAnalysis', 'metaData', and other related
%         variables.
%
%   OUTPUT FILES:
%       - 'borderAmplitude.csv': A CSV file containing the fitted slope and
%         intercept for border amplitude growth over time for each condition.
%       - A series of .pdf and .png files saved to a 'figures' subfolder,
%         visualizing the analyses.
%
%   Written 1/30/2024 by Jess Haley in MATLAB R2023b.
%
%   See also ANALYZEGFP.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 1. Load data from saved workspace

addpath(genpath('Z:\jhaley\foragingPaper'))

% Load workspace
[workspaceFile,path] = uigetfile('*.mat*','Select workspace');
load([path,workspaceFile],'background','backgroundInfo','data','info',...
    'lawnAnalysis','lawnProfiles','metaData','template');

% Figure folder
figureFolder = fullfile(path,'figures');
if ~exist(figureFolder,'dir')
    mkdir(figureFolder)
end

% Exclude image(s) and plate(s) from analysis
excludeImages = {'20231230_101739.czi'};
excludePlates = [64];
excludeAnalysis = [cellfun(@(f) strcmp(lawnAnalysis.fileName,f),...
    excludeImages,'UniformOutput',false),...
    arrayfun(@(p) lawnAnalysis.plateNum == p,excludePlates,...
    'UniformOutput',false)];
lawnAnalysis.include = sum([excludeAnalysis{:}],2) == 0;

% Exclude outliers due to dust, poor lawn detection, etc.
lawnAnalysis.include((lawnAnalysis.circularity < 0.75 & ...
    lawnAnalysis.lawnVolume == 0.5) | ...
    lawnAnalysis.borderCenterRatio < 1 | ...
    lawnAnalysis.borderCenterRatio > 35) = 0;

% Exclude patches with poor outer edge detection
imageNums = unique(lawnAnalysis.imageNum);
for i = 1:length(imageNums)
    while diff(prctile(lawnAnalysis.xPeak(lawnAnalysis.imageNum == imageNums(i) & ...
            lawnAnalysis.include),[0 100])) > 0.1
        ind = find(lawnAnalysis.imageNum == imageNums(i) & lawnAnalysis.include);
        [~,worstFit] = min(lawnAnalysis.xPeak(ind));
        lawnAnalysis.include(ind(worstFit)) = 0;
    end
end

%% Get conditions
[lawnAnalysis.condition,conditions] = ...
    findgroups(lawnAnalysis(:,{'peptone','lawnVolume','growthTimeCondition',...
    'OD600'}));
condToAnalyze = find(ismember(conditions.growthTimeCondition,[0,48]) | ...
    (conditions.growthTimeCondition == 12 & conditions.OD600 == 1 & conditions.lawnVolume == 0.5));

%% Analayze border amplitude as a function of time for each condition

tFit = (0:360) + 60*conditions.growthTimeCondition(condToAnalyze); % minutes
fFit = nan(length(condToAnalyze),length(tFit)); % border amplitude/exposure time
modelFit = table();
figure('Position',[400 400 560 420]);
for i = 1:length(condToAnalyze)
    indAnalysis = lawnAnalysis.include & lawnAnalysis.condition == condToAnalyze(i);
    t = minutes(lawnAnalysis.growthTimeTotal(indAnalysis));
    f = lawnAnalysis.borderAmplitude(indAnalysis)./...
        lawnAnalysis.exposureTime(indAnalysis);
    [fitObject,gof] = fit(t,f,'poly1');
    modelFit = [modelFit;table(fitObject.p1,fitObject.p2,'VariableNames',...
        {'slope','intercept'}),struct2table(gof)];
    subplot(6,5,i); plot(tFit(i,:),fitObject(tFit(i,:)),'k');
    hold on; gscatter(t,f,lawnAnalysis.expNum(indAnalysis))
    legend('off')
    xlim(prctile(tFit(i,:),[0 100]))
end
modelFit = [conditions(condToAnalyze,:),modelFit];

% For low OD (0.05 and 0.1) predict from regression of OD (0.5, 1, 2)
linearReg = fittype('a*x + b*y',dependent='z',...
    independent={'x','y'},coefficients={'a','b'});

indAnalysis = lawnAnalysis.include & lawnAnalysis.growthTimeCondition == 0 ...
    & strcmp(lawnAnalysis.peptone,'with') & lawnAnalysis.OD600 <= 2 & ...
    lawnAnalysis.lawnVolume == 0.5;
c = lawnAnalysis.OD600(indAnalysis);
t = minutes(lawnAnalysis.growthTimeTotal(indAnalysis));
f = lawnAnalysis.borderAmplitude(indAnalysis)./lawnAnalysis.exposureTime(indAnalysis);
[fitObject,gof] = fit([c,t],f,linearReg);
modelFit = [modelFit;table({'with'; 'with'},[0.5;0.5],[0;0],[0.05;0.1],...
    [1;1].*fitObject.b,[0.05;0.1].*fitObject.a,'VariableNames',...
    modelFit.Properties.VariableNames(1:6)),[struct2table(gof);struct2table(gof)]];

indAnalysis = lawnAnalysis.include & lawnAnalysis.growthTimeCondition == 0 ...
    & strcmp(lawnAnalysis.peptone,'with') & lawnAnalysis.OD600 <= 2 & ...
    lawnAnalysis.lawnVolume == 20;
c = lawnAnalysis.OD600(indAnalysis);
t = minutes(lawnAnalysis.growthTimeTotal(indAnalysis));
f = lawnAnalysis.borderAmplitude(indAnalysis)./lawnAnalysis.exposureTime(indAnalysis);
[fitObject,gof] = fit([c,t],f,linearReg);
modelFit = [modelFit;table({'with'; 'with'},[20;20],[0;0],[0.05;0.1],...
    [1;1].*fitObject.b,[0.05;0.1].*fitObject.a,'VariableNames',...
    modelFit.Properties.VariableNames(1:6)),[struct2table(gof);struct2table(gof)]];

modelFit = sortrows(modelFit,{'peptone','lawnVolume','growthTimeCondition','OD600'});
tFit = (0:360) + 60*modelFit.growthTimeCondition;
%%
% Plot 0.5 uL patches w/o peptone
figure('Position',[400 400 1000 300]);
subplot(131)
ind = find(strcmp(modelFit.peptone,'without') & modelFit.lawnVolume == 0.5);
lineColor = repmat(linspace(0.8,0,length(ind))',1,3);
for i = 1:length(ind)
    hold on
    plot(tFit(ind(i),:)-60*modelFit.growthTimeCondition(ind(i)),...
        tFit(ind(i),:).*modelFit.slope(ind(i)) + modelFit.intercept(ind(i)),...
        'Color',lineColor(i,:),'LineWidth',2)
end
plot(tFit(modelFit.lawnVolume == 200,:)-60*modelFit.growthTimeCondition(modelFit.lawnVolume == 200),...
    tFit(modelFit.lawnVolume == 200,:).*modelFit.slope(modelFit.lawnVolume == 200) + ...
    modelFit.intercept(modelFit.lawnVolume == 200),'k--','LineWidth',2)
set(gca,'yscale','log')
xlim([0 360]); ylim([0.01 100])
title('0.5 uL w/o peptone')
xlabel('time (min)')
ylabel('border amplitude (a.u.)')

% Plot  0.5 uL patches w/ peptone
subplot(132)
ind = find(strcmp(modelFit.peptone,'with') & modelFit.lawnVolume == 0.5);
lineColor = repmat(linspace(0.8,0,length(ind))',1,3);
for i = 1:length(ind)
    hold on
    plot(tFit(ind(i),:)-60*modelFit.growthTimeCondition(ind(i)),...
        tFit(ind(i),:).*modelFit.slope(ind(i)) + modelFit.intercept(ind(i)),...
        'Color',lineColor(i,:),'LineWidth',2)
end
plot(tFit(modelFit.lawnVolume == 200,:)-60*modelFit.growthTimeCondition(modelFit.lawnVolume == 200),...
    tFit(modelFit.lawnVolume == 200,:).*modelFit.slope(modelFit.lawnVolume == 200) + ...
    modelFit.intercept(modelFit.lawnVolume == 200),'k--','LineWidth',2)
set(gca,'yscale','log')
xlim([0 360]); ylim([0.01 100])
title('0.5 uL w/ peptone')
xlabel('time (min)')
ylabel('border amplitude (a.u.)')

% Plot 20 uL patches w/ peptone
subplot(133)
ind = find(strcmp(modelFit.peptone,'with') & modelFit.lawnVolume == 20);
lineColor = repmat(linspace(0.8,0,length(ind))',1,3);
for i = 1:length(ind)
    hold on
    plot(tFit(ind(i),:)-60*modelFit.growthTimeCondition(ind(i)),...
        tFit(ind(i),:).*modelFit.slope(ind(i)) + modelFit.intercept(ind(i)),...
        'Color',lineColor(i,:),'LineWidth',2)
end
plot(tFit(modelFit.lawnVolume == 200,:)-60*modelFit.growthTimeCondition(modelFit.lawnVolume == 200),...
    tFit(modelFit.lawnVolume == 200,:).*modelFit.slope(modelFit.lawnVolume == 200) + ...
    modelFit.intercept(modelFit.lawnVolume == 200),'k--','LineWidth',2)
set(gca,'yscale','log')
xlim([0 360]); ylim([0.01 100])
title('20+200 uL w/ peptone')
xlabel('time (min)')
ylabel('border amplitude (a.u.)')

writetable(modelFit,fullfile(path,'borderAmplitude.csv'));

%% Plot metrics

lineColor = repmat(linspace(0.8,0,9)',1,3);
lineColor = lineColor([1:9,1:7,9,9,1:7],:);
violinHalf = repmat({'full'},length(condToAnalyze),1);

metrics = {'FWHM','circularity','lawnRadius',...
    'borderAmplitude','centerAmplitude','meanAmplitude','borderCenterRatio'};

for i = 1:length(metrics)
    metric = metrics{i};
    figure('Position',[360 278 840 420]);
    hold on
    for j = 1:length(condToAnalyze)
        ind = lawnAnalysis.include & lawnAnalysis.condition == condToAnalyze(j);
        if contains(metric,'Amplitude')
            metricData = lawnAnalysis.(metric)(ind)./...
                lawnAnalysis.exposureTime(ind);
        else
            metricData = lawnAnalysis.(metric)(ind);
        end
        Violin({metricData},j,'ViolinColor',...
            {lineColor(j,:)},'QuartileStyle','shadow','ShowMean',true,...
            'HalfViolin',violinHalf{j});
    end
    ylabel(metric)
    set(gca,'TickDir','out','FontName','Arial','FontSize',12,'LineWidth',1)
    set(gcf,'Toolbar','none')
    exportgraphics(gca,fullfile(figureFolder,[metric,'.pdf']),...
        'BackgroundColor','none','ContentType','vector')

    if contains(metric,'Amplitude')
        set(gca,'YScale','log')
        exportgraphics(gca,fullfile(figureFolder,[metric,'_log.pdf']),...
        'BackgroundColor','none','ContentType','vector')
    end
end

%% Get example images highlighting analysis pipeline

% OD600 = 10, expNum = 3, expTime = 2 hr
imageNum = 749;
imageNumBack = metaData.backgroundImageNum(imageNum);
imageNumBright = metaData.brightfieldImageNum(imageNum);
scale = metaData.scale(imageNum);

% Raw background image
figure
imagesc(data{imageNumBack})
colormap('gray')
clim([1000 6000])
set(gca,'XTick',[],'YTick',[])
set(gcf,'Toolbar','none')
exportgraphics(gca,fullfile(figureFolder,'background_raw.pdf'),...
    'BackgroundColor','none','ContentType','vector')

% Raw background surface plot
hold on
surf(data{imageNumBack},'Linestyle','none')
clim([1000 10000])
set(gca,'XLim',[1 size(data{1},2)],'YLim',[1 size(data{1},1)],'ZLim',[0 13000],...
    'View',[-26 8],'Box','on','XTick',[],'YTick',[],'ZTick',[])
exportgraphics(gca,fullfile(figureFolder,'background_raw_surf.png'),...
    'ContentType','image','Resolution',300);

% Smoothed background image
figure
imagesc(background{backgroundInfo.imageNum == imageNumBack})
colormap('gray')
clim([1000 6000])
set(gca,'XTick',[],'YTick',[])
set(gcf,'Toolbar','none')
exportgraphics(gca,fullfile(figureFolder,'background_smooth.pdf'),...
    'BackgroundColor','none','ContentType','vector')

% Smoothed background surface plot
hold on
surf(background{backgroundInfo.imageNum == imageNumBack},'Linestyle','none')
clim([1000 10000])
set(gca,'XLim',[1 size(data{1},2)],'YLim',[1 size(data{1},1)],'ZLim',[0 13000],...
    'View',[-26 8],'Box','on','XTick',[],'YTick',[],'ZTick',[])
exportgraphics(gca,fullfile(figureFolder,'background_smooth_surf.png'),...
    'ContentType','image','Resolution',300);

% Raw brightfield image
figure;
imagesc(data{imageNumBright})
colormap('gray')
clim([0 13000])
set(gca,'XTick',[],'YTick',[])
set(gcf,'Toolbar','none')
exportgraphics(gca,fullfile(figureFolder,'brightfield_raw.pdf'),...
    'BackgroundColor','none','ContentType','vector')

% Raw fluorescence image
figure;
imagesc(data{imageNum})
colormap('gray')
clim([1000 12000])
set(gca,'XTick',[],'YTick',[])
set(gcf,'Toolbar','none')
exportgraphics(gca,fullfile(figureFolder,'fluorescence_raw.pdf'),...
    'BackgroundColor','none','ContentType','vector')

% Raw fluoresence surface plot
hold on
surf(data{imageNum},'Linestyle','none')
clim([1000 17000])
set(gca,'XLim',[1 size(data{1},2)],'YLim',[1 size(data{1},1)],'ZLim',[0 13000],...
    'View',[-26 8],'Box','on','XTick',[],'YTick',[],'ZTick',[])
exportgraphics(gca,fullfile(figureFolder,'fluorescence_raw_surf.png'),...
    'ContentType','image','Resolution',300);

% Normalized fluorescence image
figure;
imagesc(lawnProfiles.imageNormalized{lawnProfiles.imageNum == imageNum})
colormap('gray')
clim([1000 12000])
set(gca,'XTick',[],'YTick',[])
set(gcf,'Toolbar','none')
exportgraphics(gca,fullfile(figureFolder,'fluorescence_norm.pdf'),...
    'BackgroundColor','none','ContentType','vector')

% Normalized fluorescence surface plot
hold on
surf(lawnProfiles.imageNormalized{lawnProfiles.imageNum == imageNum},...
    'Linestyle','none')
clim([1000 17000])
set(gca,'XLim',[1 size(data{1},2)],'YLim',[1 size(data{1},1)],'ZLim',[0 13000],...
    'View',[-26 8],'Box','on','XTick',[],'YTick',[],'ZTick',[])
exportgraphics(gca,fullfile(figureFolder,'fluorescence_norm_surf.png'),...
    'ContentType','image','Resolution',300);

% Template mask image
figure;
templateMask = template.mask{template.imageNum == imageNumBright};
imagesc(bwdist(~templateMask)>20 | ~templateMask)
colormap('gray')
hold on
plot(size(lawnMask,2)-225-[0 5*scale],ones(2,1).*(size(lawnMask,1) - 240),'k','LineWidth',2)
text(size(lawnMask,2)-225-2.5*scale,size(lawnMask,1)-220,'5 mm','FontSize',12,...
    'FontName','Arial','VerticalAlignment','top','HorizontalAlignment','center')
set(gca,'XTick',[],'YTick',[])
set(gcf,'Toolbar','none')
exportgraphics(gca,fullfile(figureFolder,'template_mask.pdf'),...
    'BackgroundColor','none','ContentType','vector')

% Lawn masks image
figure;
lawnMask = lawnProfiles.labeled{lawnProfiles.imageNum == imageNum};
imagesc(bwdist(~lawnMask) > 20 | ~lawnMask)
colormap('gray')
set(gca,'XTick',[],'YTick',[])
set(gcf,'Toolbar','none')
exportgraphics(gca,fullfile(figureFolder,'lawn_mask.pdf'),...
    'BackgroundColor','none','ContentType','vector')

% Lawn and template mask image
figure;
imagesc((bwdist(~lawnMask) > 20 | ~lawnMask) & ...
    (bwdist(~templateMask)>20 | ~templateMask))
for numROI = 1:max(lawnMask,[],'all')
    [x,y] = find(lawnMask == numROI);
    text(mean(y),mean(x),num2str(numROI),'FontSize',12,'FontName','Arial',...
        'VerticalAlignment','middle','HorizontalAlignment','center')
end
colormap('gray')
hold on
plot(size(lawnMask,2)-225-[0 5*scale],ones(2,1).*(size(lawnMask,1) - 240),'k','LineWidth',2)
text(size(lawnMask,2)-225-2.5*scale,size(lawnMask,1)-220,'5 mm','FontSize',12,...
    'FontName','Arial','VerticalAlignment','top','HorizontalAlignment','center')
set(gca,'XTick',[],'YTick',[])
set(gcf,'Toolbar','none')
exportgraphics(gca,fullfile(figureFolder,'lawn_template_mask.pdf'),...
    'BackgroundColor','none','ContentType','vector')

% ROI image
figure('Position',[840 638 420 420]);
ROImask = lawnProfiles.imageNormalized{lawnProfiles.imageNum == imageNum}.*...
    (lawnMask == 1);
[x,y] = find(ROImask);
ROImask(ROImask == 0) = 12000;
imagesc(ROImask((mean(x)-130):(mean(x)+130),(mean(y)-130):(mean(y)+130)))
colormap('gray')
clim([1000 12000])
hold on
plot(255-[0 scale/2],ones(2,1).*235,'k','LineWidth',2)
text(255-scale/4,240,'500 μm','FontSize',12,...
    'FontName','Arial','VerticalAlignment','top','HorizontalAlignment','center')
set(gca,'XTick',[],'YTick',[],'Position',[0.13,0.11,0.775,0.775])
set(gcf,'Toolbar','none')
exportgraphics(gca,fullfile(figureFolder,'ROI_mask.pdf'),...
    'BackgroundColor','none','ContentType','vector')

% ROI lawn Profile
figure;
plot(lawnProfiles.distances{lawnProfiles.imageNum == imageNum},...
    lawnProfiles.pixelValuesNormalized{lawnProfiles.imageNum == imageNum}(1,:),...
    'k','LineWidth',1.5)
indLawn = find(lawnAnalysis.imageNum == imageNum,1,'first');
set(gca,'FontName','Arial','FontSize',12,'XLim',[-0.5 0.8],'XTick',-0.4:0.2:0.6)
hold on
xlabel('Distance from patch border (μm)')
ylabel('Pixel intensity (a.u.)')
set(gcf,'Toolbar','none')
exportgraphics(gca,fullfile(figureFolder,'ROI_profile.pdf'),...
    'BackgroundColor','none','ContentType','vector')

%% Patch examples for most concentrated peptone+ conditions

% expNum = 3, expTime = 2 hr
imageNums = [749,649,660,521]; % 10, 12H, 48H, 48H (200)
patchNums = [1,2,1,1];
lineColor = repmat(linspace(0.8,0,12)',1,3); lineColor = lineColor([10:12,12],:);
lineWidth = 0.3*([10:12,12]);

figure(1)
set(gcf,'Position',[840 638 420 420]);
for i = 1:length(imageNums)
    imageNum = imageNums(i);
    lawnMask = lawnProfiles.labeled{lawnProfiles.imageNum == imageNum};
    [x,y] = find(lawnMask == patchNums(i));
    ROImask = lawnProfiles.imageNormalized{lawnProfiles.imageNum == imageNum};
    indLawn = find(lawnAnalysis.imageNum == imageNum);
    indLawn = indLawn(patchNums(i));
    if lawnAnalysis.lawnVolume(indLawn) == 0.5
        offset = 130;
        xMax = 1.2;
    else
        offset = 130*8;
        xMax = 10.2;
        figure(1)
        set(gcf,'Position',[0 0 420*2 420*2])
        figure(2)
        set(gcf,'Position',[0 0 560*3 420])
    end

    figure(1)
    imagesc(ROImask((mean(x)-offset):(mean(x)+offset),...
        (mean(y)-offset):(mean(y)+offset))./lawnAnalysis.exposureTime(indLawn))
    colormap(flipud(gray))
    clim(lawnAnalysis.yOuterEdge(indLawn)/lawnAnalysis.exposureTime(indLawn) + ...
        [0 49.2])
    set(gca,'XTick',[],'YTick',[],'Position',[0.13,0.11,0.775,0.775])
    set(gcf,'Toolbar','none')
    exportgraphics(gca,fullfile(figureFolder,...
        ['ROI_OD',num2str(100*lawnAnalysis.OD600(indLawn),'%.4d'),'_',...
        num2str(lawnAnalysis.growthTimeCondition(indLawn),'%.2d'),'H_',...
        num2str(10*lawnAnalysis.lawnVolume(indLawn),'%.4d'),'uL_high.pdf']),...
        'BackgroundColor','none','ContentType','vector')

    figure(2)
    x = lawnProfiles.distances{lawnProfiles.imageNum == imageNum};
    y = (lawnProfiles.pixelValuesNormalized{lawnProfiles.imageNum == imageNum} - ...
        lawnAnalysis.yOuterEdge(indLawn))./lawnAnalysis.exposureTime(indLawn);
    plot(x,y(patchNums(i),:),'k','LineWidth',1.5)
    set(gca,'FontName','Arial','FontSize',12,...
        'XLim',[-0.6 xMax],'XTick',-0.4:0.2:xMax,...
        'YLim',max(y(patchNums(i),:))*[-0.1 1.1],...
        'YTick',[0 max(y(patchNums(i),:))],'YTickLabel',[0 1])
    xlabel('Distance from patch border (μm)')
    ylabel('Relative Fluorescence')
    exportgraphics(gca,fullfile(figureFolder,...
        ['profile_OD',num2str(100*lawnAnalysis.OD600(indLawn),'%.4d'),'_',...
        num2str(lawnAnalysis.growthTimeCondition(indLawn),'%.2d'),'H_',...
        num2str(10*lawnAnalysis.lawnVolume(indLawn),'%.4d'),'uL_high.pdf']),...
        'BackgroundColor','none','ContentType','vector')

    figure(3)
    hold on
    plot(x,y(patchNums(i),:),'Color',lineColor(i,:),'LineWidth',lineWidth(i))
end

figure(3)
set(gca,'FontName','Arial','FontSize',12,...
    'XLim',[-0.6 1.2],'XTick',-0.4:0.2:1,'YLim',[-5 50])
xlabel('Distance from patch border (μm)')
ylabel('Relative Fluorescence')
exportgraphics(gca,fullfile(figureFolder,'profile_high.pdf'),...
    'BackgroundColor','none','ContentType','vector')

%% Patch examples for least concentrated peptone+ conditions

% expNum = 3, expTime = 2 hr
imageNums = [740,789,700,780,760,729,749]; % 0.5, 1, 2, 3, 4, 5, 10
patchNums = [2,1,1,1,1,11,1];
lineColor = repmat(linspace(0.8,0,12)',1,3); lineColor = lineColor(4:10,:);
lineWidth = 0.3*(4:10);

figure(1)
set(gcf,'Position',[840 638 420 420]);

for i = 1:length(imageNums)
    imageNum = imageNums(i);
    lawnMask = lawnProfiles.labeled{lawnProfiles.imageNum == imageNum};
    [x,y] = find(lawnMask == patchNums(i));
    ROImask = lawnProfiles.imageNormalized{lawnProfiles.imageNum == imageNum};
    indLawn = find(lawnAnalysis.imageNum == imageNum);
    indLawn = indLawn(patchNums(i));
    offset = 130;

    figure(1)
    imagesc(ROImask((mean(x)-offset):(mean(x)+offset),...
        (mean(y)-offset):(mean(y)+offset))./lawnAnalysis.exposureTime(indLawn))
    colormap(flipud(gray))
    clim(lawnAnalysis.yOuterEdge(indLawn)/lawnAnalysis.exposureTime(indLawn) + ...
        [0 2.2])
    set(gca,'XTick',[],'YTick',[],'Position',[0.13,0.11,0.775,0.775])
    set(gcf,'Toolbar','none')
    exportgraphics(gca,fullfile(figureFolder,...
        ['ROI_OD',num2str(100*lawnAnalysis.OD600(indLawn),'%.4d'),'_',...
        num2str(lawnAnalysis.growthTimeCondition(indLawn),'%.2d'),'H_',...
        num2str(10*lawnAnalysis.lawnVolume(indLawn),'%.4d'),'uL.pdf']),...
        'BackgroundColor','none','ContentType','vector')

    figure(2)
    x = lawnProfiles.distances{lawnProfiles.imageNum == imageNum};
    y = (lawnProfiles.pixelValuesNormalized{lawnProfiles.imageNum == imageNum} - ...
        lawnAnalysis.yOuterEdge(indLawn))./lawnAnalysis.exposureTime(indLawn);
    plot(x,y(patchNums(i),:),'k','LineWidth',1.5)
    set(gca,'FontName','Arial','FontSize',12,...
        'XLim',[-0.6 1.2],'XTick',-0.4:0.2:1,...
        'YLim',max(y(patchNums(i),:))*[-0.1 1.1],...
        'YTick',[0 max(y(patchNums(i),:))],'YTickLabel',[0 1])
    xlabel('Distance from patch border (μm)')
    ylabel('Relative Fluorescence')
    exportgraphics(gca,fullfile(figureFolder,...
        ['profile_OD',num2str(100*lawnAnalysis.OD600(indLawn),'%.4d'),'_',...
        num2str(lawnAnalysis.growthTimeCondition(indLawn),'%.2d'),'H_',...
        num2str(10*lawnAnalysis.lawnVolume(indLawn),'%.4d'),'uL.pdf']),...
        'BackgroundColor','none','ContentType','vector')

    figure(3)
    hold on
    plot(x,y(patchNums(i),:),'Color',lineColor(i,:),'LineWidth',lineWidth(i))
end

figure(3)
set(gca,'FontName','Arial','FontSize',12,...
    'XLim',[-0.6 1.2],'XTick',-0.4:0.2:1,'YLim',[-0.1 2])
xlabel('Distance from patch border (μm)')
ylabel('Relative Fluorescence')
exportgraphics(gca,fullfile(figureFolder,'profile_low.pdf'),...
    'BackgroundColor','none','ContentType','vector')

%%
% 48H (200 uL)
figure;
imageNum = 521%689;
ROImask = lawnProfiles.imageNormalized{lawnProfiles.imageNum == imageNum};
imagesc(ROImask)

%%
Tmean = splitapply(@mean,lawnAnalysis.borderAmplitude./lawnAnalysis.exposureTime,conditionID);
figure; gscatter(conditions.OD600,Tmean./Tmean(2),conditions.peptone)
%%
figure; gscatter(lawnAnalysis.timeExperiment,...
    lawnAnalysis.borderAmplitude./lawnAnalysis.exposureTime,conditionID)

%%
figure
scatter(conditionID,lawnAnalysis.borderAmplitude./lawnAnalysis.exposureTime)
%%
figure
ind = find(lawnAnalysis.imageNum == 470 | lawnAnalysis.imageNum == 471);
gscatter(lawnAnalysis.timeExperiment(ind),...
    lawnAnalysis.borderAmplitude(ind)./lawnAnalysis.exposureTime(ind))

%%
figure;
for i = 1:17
    subplot(6,3,i)
ind = lawnAnalysis.condition == i;
hold on
gscatter(minutes(lawnAnalysis.timeExperiment(ind)),...
    lawnAnalysis.borderWidth(ind),...
    lawnAnalysis.expNum(ind))
f = fit(minutes(lawnAnalysis.timeExperiment(ind)),...
    lawnAnalysis.borderAmplitude(ind)./lawnAnalysis.exposureTime(ind),'poly1');
plot(minutes(lawnAnalysis.timeExperiment(ind)),...
    f(minutes(lawnAnalysis.timeExperiment(ind))),'k')
title(['OD600 = ',num2str(conditions.OD600(i))])
legend('off')
% gscatter(lawnAnalysis.timeExperiment(ind),...
%     lawnAnalysis.exposureTime(ind),lawnAnalysis.expNum(ind))
end
%%

indBackground = unique(metaData.backgroundImageNum);
backgroundProfilesX = nan(length(indBackground),size(data{1},2));
backgroundProfilesY = nan(length(indBackground),size(data{1},1));
for i = 1:length(indBackground)
    backgroundProfilesX(i,:) = sum(data{indBackground(i)});
    backgroundProfilesY(i,:) = sum(data{indBackground(i)},2);
end
backgroundNormX = backgroundProfilesX - min(backgroundProfilesX,[],2);
backgroundNormX = backgroundNormX./max(backgroundNormX,[],2);
backgroundNormY = backgroundProfilesY - min(backgroundProfilesY,[],2);
backgroundNormY = backgroundNormY./max(backgroundNormY,[],2);
figure;
subplot(2,2,1); plot(backgroundProfilesX')
subplot(2,2,2); plot(backgroundProfilesY')
subplot(2,2,3); plot(backgroundNormX')
hold on; plot(mean(backgroundNormX),'k','LineWidth',2)
subplot(2,2,4); plot(backgroundNormY')
hold on; plot(mean(backgroundNormY),'k','LineWidth',2)

%%


%%

% HOW TO INCORPORATE GROWTH TIMES

indLawnSmall =  find(~isnan(metaData.backgroundImageNum) & metaData.OD600 > 0 & ...
    metaData.lawnDiameter < 5 & metaData.exposureTime == 100);
indLawnMedium =  find(~isnan(metaData.backgroundImageNum) & metaData.OD600 > 0 & ...
    metaData.lawnDiameter >= 5 & metaData.lawnDiameter < 15 & metaData.exposureTime == 100);
indLawnLarge = find(~isnan(metaData.backgroundImageNum) & metaData.OD600 > 0 & ...
    metaData.lawnDiameter >= 15);

figure('Position',[840 401 800 800]);

c = jet(10);
OD600 = [0,0.05,0.1,0.5,1,2,3,4,5,10];

subplot(2,1,1)
hold on
indOD600 = arrayfun(@(x) find(OD600 == x),metaData.OD600(indLawnMedium));
for i = 1:length(indLawnMedium)
    if ~isnan(metaData.numROI(indLawnMedium(i)))
        scatter(repmat(hours(metaData.growthTimeRoomTemp(indLawnMedium(i))),...
            metaData.numROI(indLawnMedium(i)),1),...
            vertcat(metaData.meanROI{indLawnMedium(i)}).*...
            vertcat(metaData.areaROI{indLawnMedium(i)}).*...
            metaData.scale(indLawnMedium(i))^(-2)./ ...
            metaData.lawnVolume(indLawnMedium(i)),...
            'CData',c(indOD600(i),:),'MarkerFaceColor','flat',...
            'MarkerEdgeColor','flat')
    end
end
xlabel('Time at Room Temp (hours)')
ylabel('Sum F/F_0 per \muL OP50')
title('8 mm Lawns (20 uL)')
xlim([0 30])
set(gca,'FontName','Arial','FontSize',14)

subplot(2,1,2)
hold on
indOD600 = arrayfun(@(x) find(OD600 == x),metaData.OD600(indLawnSmall));
for i = 1:length(indLawnSmall)
    if ~isnan(metaData.numROI(indLawnSmall(i)))
        scatter(repmat(hours(metaData.growthTimeRoomTemp(indLawnSmall(i))),...
            metaData.numROI(indLawnSmall(i)),1),...
            vertcat(metaData.meanROI{indLawnSmall(i)}).*...
            vertcat(metaData.areaROI{indLawnSmall(i)}).*...
            metaData.scale(indLawnSmall(i))^(-2)./ ...
            metaData.lawnVolume(indLawnSmall(i)),...
            'CData',c(indOD600(i),:),'MarkerFaceColor','flat',...
            'MarkerEdgeColor','flat')
    end
end
xlabel('Time at Room Temp (hours)')
ylabel('Sum F/F_0 per \muL OP50')
title('1.5 mm Lawns (0.5 uL)')
xlim([0 30])
set(gca,'FontName','Arial','FontSize',14)
% exportgraphics(gcf,['Z:\jhaley\analysis\ForagingAnalysisGFP',filesep,'growthTime.pdf'],...
%     'BackgroundColor','none','ContentType','vector');

%%

figure
hold on
for i = 1:12
    plot(metaData.edgeProfile{433}{i})
end

%% Get rise and decay distances

warning('off','curvefit:fit:equationBadlyConditioned')

for i = 1:size(metaData,1)
    metaData.edgeInd{i} = nan(size(metaData.edgeProfile{i}));
    metaData.edgeDistances{i} = nan(size(metaData.edgeProfile{i},1),7);
    metaData.edgeValues{i} = nan(size(metaData.edgeProfile{i},1),7);
    metaData.FWHM{i} = nan(size(metaData.edgeProfile{i}));
%     metaData.edgeFitR{i} = nan(size(metaData.edgeProfile{i},1),2);
    for j = 1:size(metaData.edgeProfile{i})

        F = metaData.edgeProfile{i}{j}; F = F - min(F);

        % Find index of lawn edge using inflection point
        dF = [NaN;diff(movmean(F,20))];
        ddF = [NaN;diff(dF)];
        [~,locs] = findpeaks(ddF,'MinPeakDistance',100);
        i_edge = locs(1);
%         i_edge = find(dF > mean(dF(1:80),'omitnan') + ...
%             4*std(dF(1:80),'omitnan'),1); % should be approximately 100

        % Get distance in micrometers
        D = 1000.*([1:length(F)]' - i_edge)./metaData.scale(i); % um

        % Get edge and max values
        F_edge = F(i_edge); % F at lawn edge
        [F_max,i_max] = max(F(1:end-20)); % max F
        [F_min,i_min] = min(F(i_max:end-20));
        i_min = i_min + i_max - 1;

        % F(D) = F_max * (1 - exp(-D/tau))
        F_rise63 = (F_max - F_edge)*(1-1/exp(1)) + F_edge;
        i_rise63 = find(F(1:end-20) > F_rise63,1);
        D_rise63 = D(i_rise63);
        F_fall63 = F_max - (F_max - F_min)*(1-1/exp(1));
        i_fall63 = find(F(i_max:end) < F_fall63,1) + i_max - 1;
        D_fall63 = D(i_fall63);

        F_rise50 = (F_max - F_edge)*0.5 + F_edge;
        i_rise50 = find(F(1:end-20) > F_rise50,1);
        D_rise50 = D(i_rise50);
%         F_fall50 = F_max - (F_max - F_min)*0.5;
        F_fall50 = F_rise50;
        i_fall50 = find(F(i_max:end) < F_fall50,1) + i_max - 1;
        D_fall50 = D(i_fall50);

%         % Find best index for fitting decay
%         i_decay = round(1.5*find(F(i_max:end) < F_fall63,1)) + i_max;
%         F_decay = F(i_decay);
%         
%         [~,i_dMin] = min(dF(1:end-10));
%         i_decay = find(dF(i_dMin:end) > 0,1) + i_dMin - 1; % index for decay fit
%         F_decay = F(i_decay); % min F for decay fit
% 
%         % Use poly3 fit to interpolate the edge peaks
%         [F_rise,gof_rise] = fit(D(i_edge:i_max),F(i_edge:i_max),'poly3');
%         [F_fall,gof_fall] = fit(D(i_max:i_decay),F(i_max:i_decay),'poly3');
%         D_rise = D(i_edge):D(i_max);
%         D_fall = D(i_max):D(i_decay);
% 
%         % F(D) = F_max * (1 - exp(-D/tau))
%         i_rise63 = find(F_rise(D_rise) > F_rise63,1);
%         D_rise63 = D_rise(i_rise63);
%         i_fall63 = find(F_fall(D_fall) < F_fall63,1);
%         D_fall63 = D_fall(i_fall63);
% 
%         figure;
%         hold on
%         scatter(D(i_edge),F_edge,'r','filled')
%         scatter(D(i_max),F_max,'k','filled')
%         scatter(D(i_min),F_min,'b','filled')
%         scatter(D_rise63,F_rise63,'r','filled')
%         scatter(D_fall63,F_fall63,'b','filled')
%         scatter(D_rise50,F_rise50,'rs','filled')
%         scatter(D_fall50,F_fall50,'bs','filled')
%         plot(D,F,'k')
%         ylim([0 F_max])
%         xlabel('\mum')
%         ylabel('F')
%         scatter(D(i_decay),F_decay,'b','filled')
%         plot(D_rise,F_rise(D_rise),'r',D_fall,F_fall(D_fall),'b')
        try
            metaData.edgeInd{i}(j) = i_edge;
            % [0, 50% rise, 63% rise, max, 50% fall 63% fall, min]
            metaData.edgeDistances{i}(j,:) = [D(i_edge),D_rise50,D_rise63,...
                D(i_max),D_fall50,D_fall63,D(i_min)];
            metaData.edgeValues{i}(j,:) = [F_edge,F_rise50,F_rise63,...
                F_max,F_fall50,F_fall63,F_min];
            metaData.FWHM{i}(j) = D_fall50 - D_rise50;
%           metaData.edgeFitR{i}(j,:) = [gof_rise.rsquare,gof_fall.rsquare];
        end
    end
end

%%

save(['Z:\jhaley\analysis\ForagingAnalysisGFP',filesep,'data.mat'],...
    'metaData','template','masks','-v7.3');
save(['Z:\jhaley\analysis\ForagingAnalysisGFP',filesep,'workspace.mat'],...
    'metaData','template','masks','-v7.3');

% Plot exponential regression +/- 95% confidence interval
% Plot slope of regression to look at starting bacterial amount

%% Plot FWHM

FWHM = @(ind) vertcat(metaData.FWHM{ind});
rise63 = @(ind) vertcat(metaData.edgeDistances{ind}(:,3));
fall63 = @(ind) vertcat(metaData.edgeDistances{ind}(:,6));
edgeMax = @(ind) vertcat(metaData.edgeValues{ind}(:,4));
lawnMin = @(ind) vertcat(metaData.edgeValues{ind}(:,7));
lawnMean = @(ind) max(vertcat(metaData.meanROI{ind}),1e-10);
growthTimeRoomTemp = @(ind) repmat(hours(metaData.growthTimeRoomTemp(ind)),...
            metaData.numROI(ind),1);

figure('Position',[840 401 800 800]);

c = jet(10);
OD600 = [0,0.05,0.1,0.5,1,2,3,4,5,10];

subplot(2,1,1)
hold on
indOD600 = arrayfun(@(x) find(OD600 == x),metaData.OD600(indLawnMedium));
indFix = [];
for i = 1:length(indLawnMedium)
    if ~isnan(metaData.numROI(indLawnMedium(i)))
        scatter(growthTimeRoomTemp(indLawnMedium(i)),FWHM(indLawnMedium(i)),...
            'CData',c(indOD600(i),:),'MarkerFaceColor','flat',...
            'MarkerEdgeColor','flat')
    end
end
xlabel('Time at Room Temp (hours)')
ylabel('Normalized F')
ylabel('FWHM Lawn Edge')
title('8 mm Lawns (20 \muL)')
xlim([0 30])
ylim([0 800])
set(gca,'FontName','Arial','FontSize',14)

subplot(2,1,2)
hold on
indOD600 = arrayfun(@(x) find(OD600 == x),metaData.OD600(indLawnSmall));
for i = 1:length(indLawnSmall)
    if ~isnan(metaData.numROI(indLawnSmall(i)))
        scatter(growthTimeRoomTemp(indLawnSmall(i)),FWHM(indLawnSmall(i)),...
            'CData',c(indOD600(i),:),'MarkerFaceColor','flat',...
            'MarkerEdgeColor','flat')
    end
end
xlabel('Time at Room Temp (hours)')
ylabel('Normalized F')
ylabel('FWHM Lawn Edge')
title('1.5 mm Lawns (0.5 \muL)')
xlim([0 30])
ylim([0 800])
set(gca,'FontName','Arial','FontSize',14)
exportgraphics(gcf,['Z:\jhaley\analysis\ForagingAnalysisGFP',filesep,'FWHM.pdf'],...
    'BackgroundColor','none','ContentType','vector');

%% 

% opts = fitoptions('Method','NonlinearLeastSquares');
% opts.Lower = [1 1 8 0];
% opts.Upper = [15 10 20 20];
% opts.StartPoint = [5 1 10 3];
% ft = fittype('c + (b - c)/(1 + (x/a)^d)');
% a: logistic inflection point
% b: logistic minimum amplitude
% c: logistic maximum amplitude
% d: logistic Hill's slope (steepness of the curve)

plateNum = unique(metaData.plateNum(metaData.lawnVolume ~= 200  & ...
        metaData.OD600>0));
OD600 = nan(size(plateNum));
lawnDiameter = nan(size(plateNum));
growthAfterSeed = nan(size(plateNum));
a = nan(length(plateNum),3,3);
b = nan(length(plateNum),3,3);
r = nan(length(plateNum),3);
figure
for i = 1:length(plateNum)
    ind = find(metaData.plateNum==plateNum(i) & ...
        metaData.growthTimeRoomTemp>0 & ~isnan(metaData.numROI));
    OD600(i) = metaData.OD600(ind(1));
    lawnDiameter(i) = metaData.lawnDiameter(ind(1));
    growthAfterSeed(i) = hours(metaData.growthTimeAfterSeed(ind(1)));
    x = [];
    y = [];
    for j = 1:length(ind)
        thisY = max(metaData.meanROI{ind(j)},0) + 1;
        thisX = repmat(metaData.growthTimeRoomTemp(ind(j)),size(thisY));
        x = vertcat(x,thisX);
        y = vertcat(y,thisY);
    end
    x = hours(x);

    % Plot
    subplot(6, 4, i)
    hold on
    scatter(x,log(y),25,'k','filled')
%     set(gca,'YScale','log')
    xlabel('hours')
    
    try
    % Fit hours 5 to 20 with exponential regression
    [f,gof] = fit(x(x>=5 & x<20), y(x>=5 & x<20), 'exp1');
    ci = confint(f,0.95);
    a(i,1,:) = [f.a;ci(:,1)];
    b(i,1,:) = [f.b;ci(:,2)];
    r(i,1) = gof.rsquare;
    plot(0:30,log(f(0:30)),'b')

    % Fit hours 0 to 5 with linear regression
%     [f,gof] = fit(x(x<5), y(x<5), 'poly1');
%     ci = confint(f,0.95);
%     a(i,2,:) = [f.p2;ci(:,2)];
%     b(i,2,:) = [f.p1;ci(:,1)];
%     r(i,2) = gof.rsquare;
%     %plot(0:15,log(f(0:15)),'r')
% 
%     % Fit hours 20 to 30 with linear regression
%     [f,gof] = fit(x(x>=20), y(x>=20), 'poly1');
%     ci = confint(f,0.95);
%     a(i,3,:) = [f.p2;ci(:,2)];
%     b(i,3,:) = [f.p1;ci(:,1)];
%     r(i,3) = gof.rsquare;
    %plot(15:30,log(f(15:30)),'r')
    end

%     [f,gof] = fit(x,log(y),ft,opts);
%     c(i) = f.c;
%     d(i) = f.d;

    ylim([0 3])
    yticks(0:3)
    yticklabels({'10^0','10^1','10^2','10^3'})
    title(['OD600 = ',num2str(OD600(i)),' (',num2str(lawnDiameter(i)),' mm)'])

    if i == 6 || i == 15
        figure('Position',[400 400 688 552])
        hold on
        scatter(x,log(y),25,'k','filled')
        ylim([0 3])
        yticks(0:3)
        yticklabels({'10^0','10^1','10^2','10^3'})
        xlabel('Time at Room Temp (hrs)')
        ylabel('Mean(Normalized Intensity)')
        set(gca,'FontSize',18)
        set(gcf,'Toolbar','none')
        if i == 6
            exportgraphics(gca,['Z:\jhaley\analysis\ForagingAnalysisGFP\', ...
                'intensity_expontential_large.pdf'],'BackgroundColor','none','ContentType','vector')
            plot(0:30,log(f(0:30)),'b','LineWidth',2)
            exportgraphics(gca,['Z:\jhaley\analysis\ForagingAnalysisGFP\', ...
                'intensity_expontential_large_fit.pdf'],'BackgroundColor','none','ContentType','vector')
        else
            exportgraphics(gca,['Z:\jhaley\analysis\ForagingAnalysisGFP\', ...
                'intensity_expontential_small.pdf'],'BackgroundColor','none','ContentType','vector')
            plot(0:30,log(f(0:30)),'b','LineWidth',2)
            exportgraphics(gca,['Z:\jhaley\analysis\ForagingAnalysisGFP\', ...
                'intensity_expontential_small_fit.pdf'],'BackgroundColor','none','ContentType','vector')
        end
        close(gcf)
    end
end

%%

[f,gof] = fit(OD600(growthAfterSeed < 2 & lawnDiameter == 1.5 & OD600 >= 0.5),...
    a(growthAfterSeed<2 & lawnDiameter == 1.5 & OD600 >= 0.5),'poly1');
ci = confint(f,0.95);
smallLawnCoeff(1,:) = [f.p1;ci(:,1)]; % slope
smallLawnCoeff(2,:) = [f.p2;ci(:,2)]; % y-intercept
smallLawnA = @(OD600) smallLawnCoeff(1,1)*OD600 + smallLawnCoeff(2,1);
OD600SmallA = @(a) (a - smallLawnCoeff(2,1))./smallLawnCoeff(1,1);

[f,gof] = fit(OD600(growthAfterSeed < 2 & lawnDiameter == 8 & OD600 >= 0.1),...
    a(growthAfterSeed<2 & lawnDiameter == 8 & OD600 >= 0.1),'poly1');
ci = confint(f,0.95);
largeLawnCoeff(1,:) = [f.p1;ci(:,1)]; % slope
largeLawnCoeff(2,:) = [f.p2;ci(:,2)]; % y-intercept
largeLawnA = @(OD600) largeLawnCoeff(1,1)*OD600 + largeLawnCoeff(2,1);
OD600LargeA = @(a) (a - largeLawnCoeff(2,1))./largeLawnCoeff(1,1);

OD600_Estimate = OD600;
OD600_Estimate(growthAfterSeed > 2 & lawnDiameter == 1.5) = ...
    OD600SmallA(a(growthAfterSeed > 2 & lawnDiameter == 1.5));
OD600_Estimate(growthAfterSeed > 2 & lawnDiameter == 8) = ...
    OD600LargeA(a(growthAfterSeed > 2 & lawnDiameter == 8));

figure('Position',[400 400 688 552])
hold on
as = scatter(OD600(6),a(6),25,'k','filled');
bs = scatter(OD600(6),a(6),25,'b','filled');
s = scatter(OD600,a(:,1,1),[],lawnDiameter,'filled');
colormap([0 0 1;0 0 0])
xlabel('Initial OD600')
ylabel('Initial Value (a)')
set(gca,'FontName','Arial','FontSize',18)
set(gcf,'Toolbar','none')
l = legend([bs,as],{'Lawn Diameter = 1.5 mm','Lawn Diameter = 8 mm'},'Location','northeast');
l.Box = 'off';
exportgraphics(gca,['Z:\jhaley\analysis\ForagingAnalysisGFP\', ...
    'exponential_coefficient_a.pdf'],'BackgroundColor','none','ContentType','vector')
scatter(OD600_Estimate,a(:,1,1),[],lawnDiameter);
plot(0:20,largeLawnA(0:20),'k','LineWidth',2)
plot([OD600_Estimate(1),OD600(1)],(a([1,1],1,1)),'k--')
plot([OD600_Estimate(2),OD600(2)],(a([2,2],1,1)),'k--')
xlim([0 15])
l = legend([bs,as],{'Lawn Diameter = 1.5 mm','Lawn Diameter = 8 mm'},'Location','northeast');
l.Box = 'off';
exportgraphics(gca,['Z:\jhaley\analysis\ForagingAnalysisGFP\', ...
    'exponential_coefficient_a_largefit.pdf'],'BackgroundColor','none','ContentType','vector')
plot(0:200,smallLawnA(0:200),'b')
plot([OD600_Estimate(21),OD600(21)],(a([21,21],1,1)),'b--')
plot([OD600_Estimate(22),OD600(22)],(a([22,22],1,1)),'b--')
xlim([0 200])
ylim([0 12])
l = legend([bs,as],{'Lawn Diameter = 1.5 mm','Lawn Diameter = 8 mm'},'Location','northeast');
l.Box = 'off';
exportgraphics(gca,['Z:\jhaley\analysis\ForagingAnalysisGFP\', ...
    'exponential_coefficient_a_smallfit.pdf'],'BackgroundColor','none','ContentType','vector')

figure('Position',[400 400 688 552])
hold on
% as = scatter(OD600(1),b(1),25,'b','filled');
% bs = scatter(OD600(1),b(1),25,'k','filled');
scatter(OD600,b(:,1,1),[],lawnDiameter,'filled')
colormap([0 0 1;0 0 0])
xlabel('Initial OD600')
ylabel('Change Factor (b)')
set(gca,'FontName','Arial','FontSize',18)
set(gcf,'Toolbar','none')
% l = legend([bs,as],{'Lawn Diameter = 1.5 mm','Lawn Diameter = 8 mm'},'Location','northeast');
% l.Box = 'off';
exportgraphics(gca,['Z:\jhaley\analysis\ForagingAnalysisGFP\', ...
    'exponential_coefficient_b.pdf'],'BackgroundColor','none','ContentType','vector')